---
apiVersion: v1
kind: Namespace
metadata:
  name: kyma-installer
  labels:
    istio-injection: disabled
    kyma-project.io/installation: ""
---
apiVersion: v1
kind: LimitRange
metadata:
  name: kyma-default
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
spec:
  limits:
  - max:
      memory: 1024Mi # Maximum memory that a container can request
    default:
      # If a container does not specify memory limit, this default value will be applied.
      # If a container tries to allocate more memory, container will be OOM killed.
      memory: 96Mi
    defaultRequest:
      # If a container does not specify memory request, this default value will be applied.
      # The scheduler considers this value when scheduling a container to a node.
      # If a node has not enough memory, such pod will not be created.
      memory: 32Mi
    type: Container
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: installations.installer.kyma-project.io
  labels:
    kyma-project.io/installation: ""
spec:
  group: installer.kyma-project.io
  version: v1alpha1
  scope: Namespaced
  names:
    kind: Installation
    singular: installation
    plural: installations
    shortNames: ['installation']
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: releases.release.kyma-project.io
  labels:
    kyma-project.io/installation: ""
spec:
  group: release.kyma-project.io
  version: v1alpha1
  scope: Namespaced
  names:
    kind: Release
    singular: release
    plural: releases
    shortNames: ['release']
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kyma-installer
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kyma-installer
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
spec:
  template:
    metadata:
      labels:
        name: kyma-installer
    spec:
      serviceAccountName: kyma-installer
      containers:
      - name: kyma-installer-container
        image: gabbi/kyma-installer2:latest
        imagePullPolicy: IfNotPresent
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kyma-installer-reader
  labels:
    kyma-project.io/installation: ""
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kyma-installer
  labels:
    kyma-project.io/installation: ""
subjects:
- kind: ServiceAccount
  name: kyma-installer
  namespace: kyma-installer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyma-installer-reader

---
apiVersion: v1
kind: Secret
metadata:
  name: application-connector-certificate-overrides
  namespace: kyma-installer
  labels:
    installer: overrides
    kyma-project.io/installation: ""
type: Opaque
data:
  global.applicationConnectorCa: ""
  global.applicationConnectorCaKey: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-certificate-overrides
  namespace: kyma-installer
  labels:
    installer: overrides
    kyma-project.io/installation: ""
data:
  global.tlsCrt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZkakNDQkY2Z0F3SUJBZ0lTQkJkclRwWkxOZEhScGxFRVpvVDJkSm5yTUEwR0NTcUdTSWIzRFFFQkN3VUEKTUVveEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1TTXdJUVlEVlFRRApFeHBNWlhRbmN5QkZibU55ZVhCMElFRjFkR2h2Y21sMGVTQllNekFlRncweE9UQXpNVE13T1RNMk1UWmFGdzB4Ck9UQTJNVEV3T1RNMk1UWmFNQ2t4SnpBbEJnTlZCQU1NSGlvdWEyNWhkR2wyWlMxMWNHZHlZV1JsTWk1cmVXMWgKTG05dWJHbHVaVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMeGVBNG9PK0JncApVcTRNNFBLajI3bVoxOC9JQ3VqMnNqa0lUNzVKN3BxZURRWFJobDdWYWQ0ZzI0UXZaeWhwYkNYV3hiWEY5WTQxCkZ3VkJuREtJS3U4aDFaS1pXMlF3cGpMZjJWd3hhazhHMTJiNzhJN1J2cXBLTEFLejU1a0lnV0FoZDhSaDJBYUIKOHdsR0F3S3JxbUxoZE85b0xVMU83dGxuNFZ1bjY4UWFRQ3RDRkthWDdBWHd2dXMzZ1FqMjRPTzBXRWpDNlBnRAo4eHlPcnZvWUJhM1F1bU9lN2xTdWNacnhUSzFudC9LS1JPeCszSWZPMFVCd0RLZ0kzWVNWRU9jSXBuRlhkNERFCnU3UEZzWnZobmFqcDZQdEZlZy9DUVV6NFQwN0dBc1VmenluZEVwa1Q3Y0RvTlJmK2NxaUVBYkVRODVYenBvb20KWm44TnNOOFlDOU1DQXdFQUFhT0NBblV3Z2dKeE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVQpCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVzc0VtClVUZ3RuNWtDcytnSFVwTkdvS08vbytNd0h3WURWUjBqQkJnd0ZvQVVxRXBxWXdSOTNicm0wVG0zcGtWbDcvT28KN0tFd2J3WUlLd1lCQlFVSEFRRUVZekJoTUM0R0NDc0dBUVVGQnpBQmhpSm9kSFJ3T2k4dmIyTnpjQzVwYm5RdAplRE11YkdWMGMyVnVZM0o1Y0hRdWIzSm5NQzhHQ0NzR0FRVUZCekFDaGlOb2RIUndPaTh2WTJWeWRDNXBiblF0CmVETXViR1YwYzJWdVkzSjVjSFF1YjNKbkx6QXBCZ05WSFJFRUlqQWdnaDRxTG10dVlYUnBkbVV0ZFhCbmNtRmsKWlRJdWEzbHRZUzV2Ym14cGJtVXdUQVlEVlIwZ0JFVXdRekFJQmdabmdRd0JBZ0V3TndZTEt3WUJCQUdDM3hNQgpBUUV3S0RBbUJnZ3JCZ0VGQlFjQ0FSWWFhSFIwY0RvdkwyTndjeTVzWlhSelpXNWpjbmx3ZEM1dmNtY3dnZ0VHCkJnb3JCZ0VFQWRaNUFnUUNCSUgzQklIMEFQSUFkd0IwZnRxRE1hMHpFSkVobk00bFQwSnd3ci85WGtJZ0NNWTMKTlhubUVIdk1WZ0FBQVdsMm44Y01BQUFFQXdCSU1FWUNJUUM5Q2Rqc3UxQXdYV3BpRzJyOVhMamVtYXFJTlUrdAp6TW8vczE2SHlxZGVqQUloQVBDSVBuSjdZQXVkQXJGaWJid2RNbHY4UVlTU3laL0UxdlBLV2FwZnJiUmJBSGNBCktUeFJsbFRJT1dXNnFsRDhXQWZVdDIrL1dIb3BjdHlrd3d6MDVVVkg5SGdBQUFGcGRwL0c4QUFBQkFNQVNEQkcKQWlFQWhkZ0VuQ09JMFlZdjRDUVVqdTFtd3FpVlNKUXRyQVFvay8xT0RzeGpqU01DSVFDeHBsbDdXcUVaRTE0WQp3Qk91aGVRRkhTUFlMNnRiMFJMMlV4SzA2Rkhhc1RBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWVqak5EdGpFCnptYmdEbnlPSEZqNjk4T3pxcFk4bGVuTHB1VW5yY0MzV00xSmd4V0J0cGVGZDM4ZUJtVkxMTGlYeURWTzNOVGgKWnkwZjJ4NmFkWGk4U3NjTEFhN0gxY1BHb1gvcjMwOEVjR3hMSVhtRDd3TmNYcVFqZFM2c3BLWENyMzVBSkh2YgpYZis4THczWlhVM0tCVUUyditDV2oycXZ2TkJ4SkdoL3hDRkc5M2t1aEVUdDROM09pNU9nWlVvM0g2Nm15Y3NpCm14NVEzaThMV1RhajM0ZFVhZFZzbTc2SGlMcmpNTEdoT013RlIvcXcvSEI4eEtzRHZFSmxyc1lNeUhKbFU3dU0Kdjc5SGdyY2pmdW03bndsUHluUTVjN3RXUzQ0WVdaZmtOZy9yOVcxVStSVWpnWTlJYVZSR2x5dXQ0eFNMTzRzTwpqaWExditNV1BTWUppdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVrakNDQTNxZ0F3SUJBZ0lRQ2dGQlFnQUFBVk9GYzJvTGhleW5DREFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEUyTURNeE56RTJOREEwTmxvWERUSXhNRE14TnpFMk5EQTBObG93ClNqRUxNQWtHQTFVRUJoTUNWVk14RmpBVUJnTlZCQW9URFV4bGRDZHpJRVZ1WTNKNWNIUXhJekFoQmdOVkJBTVQKR2t4bGRDZHpJRVZ1WTNKNWNIUWdRWFYwYUc5eWFYUjVJRmd6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBbk5NTThGcmxMa2UzY2wwM2c3Tm9ZekRxMXpVbUdTWGh2YjQxOFhDU0w3ZTRTMEVGCnE2bWVOUWhZN0xFcXhHaUhDNlBqZGVUbTg2ZGljYnA1Z1dBZjE1R2FuL1BRZUdkeHlHa09sWkhQL3VhWjZXQTgKU014K3lrMTNFaVNkUnh0YTY3bnNIamNBSEp5c2U2Y0Y2czVLNjcxQjVUYVl1Y3Y5YlR5V2FOOGpLa0tRRElaMApaOGgvcFpxNFVtRVVFejlsNllLSHk5djZEbGIyaG9uemhUK1hocSt3M0JydmF3MlZGbjNFSzZCbHNwa0VObldBCmE2eEs4eHVRU1hndm9wWlBLaUFsS1FUR2RNRFFNYzJQTVRpVkZycW9NN2hEOGJFZnd6Qi9vbmt4RXowdE52amoKL1BJemFyazVNY1d2eEkwTkhXUVdNNnI2aENtMjFBdkEySDNEa3dJREFRQUJvNElCZlRDQ0FYa3dFZ1lEVlIwVApBUUgvQkFnd0JnRUIvd0lCQURBT0JnTlZIUThCQWY4RUJBTUNBWVl3ZndZSUt3WUJCUVVIQVFFRWN6QnhNRElHCkNDc0dBUVVGQnpBQmhpWm9kSFJ3T2k4dmFYTnlaeTUwY25WemRHbGtMbTlqYzNBdWFXUmxiblJ5ZFhOMExtTnYKYlRBN0JnZ3JCZ0VGQlFjd0FvWXZhSFIwY0RvdkwyRndjSE11YVdSbGJuUnlkWE4wTG1OdmJTOXliMjkwY3k5awpjM1J5YjI5MFkyRjRNeTV3TjJNd0h3WURWUjBqQkJnd0ZvQVV4S2V4cEhzc2NmcmI0VXVRZGYvRUZXQ0ZpUkF3ClZBWURWUjBnQkUwd1N6QUlCZ1puZ1F3QkFnRXdQd1lMS3dZQkJBR0MzeE1CQVFFd01EQXVCZ2dyQmdFRkJRY0MKQVJZaWFIUjBjRG92TDJOd2N5NXliMjkwTFhneExteGxkSE5sYm1OeWVYQjBMbTl5WnpBOEJnTlZIUjhFTlRBegpNREdnTDZBdGhpdG9kSFJ3T2k4dlkzSnNMbWxrWlc1MGNuVnpkQzVqYjIwdlJGTlVVazlQVkVOQldETkRVa3d1ClkzSnNNQjBHQTFVZERnUVdCQlNvU21wakJIM2R1dWJST2JlbVJXWHY4Nmpzb1RBTkJna3Foa2lHOXcwQkFRc0YKQUFPQ0FRRUEzVFBYRWZOaldEamRHQlg3Q1ZXK2RsYTVjRWlsYVVjbmU4SWtDSkx4V2g5S0VpazNKSFJSSEdKbwp1TTJWY0dmbDk2UzhUaWhSelp2b3JvZWQ2dGk2V3FFQm10enczV29kYXRnK1Z5T2VwaDRFWXByLzF3WEt0eDgvCndBcEl2SlN3dG1WaTRNRlU1YU1xclNERTZlYTczTWoydGNNeW81ak1kNmptZVdVSEs4c28vam9XVW9IT1Vnd3UKWDRQbzFRWXorM2RzemtEcU1wNGZrbHhCd1hSc1cxMEtYelBNVForc09QQXZleXhpbmRtamtXOGxHeStRc1JsRwpQZlorRzZaNmg3bWplbTBZK2lXbGtZY1Y0UElXTDFpd0JpOHNhQ2JHUzVqTjJwOE0rWCtRN1VOS0VrUk9iM042CktPcWtxbTU3VEgySDNlREpBa1NuaDYvRE5GdTBRZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  global.tlsKey: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRQzhYZ09LRHZnWUtWS3UKRE9EeW85dTVtZGZQeUFybzlySTVDRSsrU2U2YW5nMEYwWVplMVduZUlOdUVMMmNvYVd3bDFzVzF4ZldPTlJjRgpRWnd5aUNydklkV1NtVnRrTUtZeTM5bGNNV3BQQnRkbSsvQ08wYjZxU2l3Q3MrZVpDSUZnSVhmRVlkZ0dnZk1KClJnTUNxNnBpNFhUdmFDMU5UdTdaWitGYnArdkVHa0FyUWhTbWwrd0Y4TDdyTjRFSTl1RGp0RmhJd3VqNEEvTWMKanE3NkdBV3QwTHBqbnU1VXJuR2E4VXl0WjdmeWlrVHNmdHlIenRGQWNBeW9DTjJFbFJEbkNLWnhWM2VBeEx1egp4YkdiNFoybzZlajdSWG9Qd2tGTStFOU94Z0xGSDg4cDNSS1pFKzNBNkRVWC9uS29oQUd4RVBPVjg2YUtKbVovCkRiRGZHQXZUQWdNQkFBRUNnZ0VBYmVYNzhxUmhJdGVaSVdycUl5WnVuNDZlVnQvRFhiL3dvMDJ5R0xkUnVtdlQKOVQwVlJHY0c2VTRLUk1qVFNzU1hFRXlKOVUrVndHNUJEQlFIYVlRQWFKdzQydHNXY3hIZkpYZHNmVmxuU013WgpDRUNkVFBZYVk0ZjZ2V2p4Q2x2bi80b0hNbEJUbFJoa0Qxa0ZrSjFQUDNtQ205c1A4emJHSzVscjVlbkdxQllYCnBSSHpmL01QSEtaSzJQVDM4cU1RWklCZlZNVU5RazQ4WUNUakVxd0cxMEQwL2Fuc3BoVTkzTG50VEE5c1I4QVEKd0NRbUMvbElXSDBNOEVKT3hNNHNuUW9lWjIrTUdwbXloN3NST05aZ1ZIODhaZm1YdisyeWhJVDRFYVR4aUF5VAplc0RVdVRXcklacDBxWGRYQ2dtVGo1QnBoZkdYTHl6L3lXSzRWVFJEb1FLQmdRRHR5Y0Q1RnM4OW05OEYrMndDCjBMOGYzT3hwL0lpUXJ2c0ViNUYrVjVtK0p0a1JwTjFCOWw2K2doMVdZa3NnV1BPZW9xL0YvcnRwMmcxUmJjRVcKZjRtOFJNRi90enUzVEVrRFdOcVQxbFNCeU1IcE9VbVR6UVFCU2RpTWwzUUZYdE93K2xwdWtpWWFTT2llL1ZyRwpMNFdNWENhYU9LN3RRWFA1QlFnTzNkaFd0d0tCZ1FES3kwZGRLWmpiVFNMa2RmNzF6TExSeEg0bWN6RVhnWm1QCkRTMldyR2lGNTdPdjdvT3Z2aVhsRHFjUVFmbDYzcEw2S2tnWXo1OGVWRk51Q1RJZU9ZZGU4eXBJK0ROWkZXZTcKNFhTb1NLeUQ1cFlybHhnZGVSbFh3SXpCYWNGdWFMR0tkMEV3L1NOT05nMkdLM3dQcVEvVUdpaHljVURIaHI5WAowbFJBSHVRM3hRS0JnUURkNnZ1d3ZDdmZXSmdVc2llRW5TS3g3dkdvbkdrcmRsS0lPa056d1BlWDhoT0Zsdkp6CmZDWEI4QmJISnVic0luZ0NwZHdia1hlQSsyS1FpemkzOFlFdTlwQUx6SXJycjBNNDMzVG1vaEd1S2hsbXV2TkQKQUFQcjIrcEFrNXhRNHNYNEZqM05rWklEMStWWmRDT0NjSmxYZkN6K28wWUY0SjhHV1Q3QytTSE5Fd0tCZ1FDWQpHWE1DK3VuOHdaUUVDa1FhRTFlallWN0VjKzFFRmg0WVh1ZnNkSTlJcjRuajBGN1FkeXR3NjFaK0tSMTIvR3o4CldLNE9mZHA0SXdNWUtxbCtaZU9VWVlrN2hYenR1ZEk5NWxGYXpuY2x6dEtmQ3dvNVFOU3pMbVhqd3ZBallUNlgKL2UzVlVtY2lpQVFJdDZDckZrQWE4eXVXK2o1OTZDQ25POGVZK0JKdmlRS0JnUUNzcFZ5eHlONUdPUzIxdXM1dQpvUnNMTjJ6YUVpVjR3OG52cVhLOEJxU3A4dWJsRjU3VHJUSUozc0drWjNueGI2cWJNaWlyVjc4Y21oa0JiSk9kClJLU2VVc0tkbVloTFlWMnlHUUNFOGpNT00yNzlFb3dCT3JhQ2RDLzlSbm05bi9VUEQ4dElTZGtOc1RqSDBmMGMKdlRKMlpmbHdya2sxVElqWkVYRFNCWE15a1E9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: installation-config-overrides
  namespace: kyma-installer
  labels:
    installer: overrides
    kyma-project.io/installation: ""
data:
  global.domainName: "knative-upgrade2.kyma.online"
  global.loadBalancerIP: ""
  global.etcdBackup.containerName: ""
  global.etcdBackup.enabled: ""
  nginx-ingress.controller.service.loadBalancerIP: ""
  cluster-users.users.adminGroup: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config-overrides
  namespace: kyma-installer
  labels:
    installer: overrides
    component: monitoring
    kyma-project.io/installation: ""
data:
  global.alertTools.credentials.slack.apiurl: ""
  global.alertTools.credentials.slack.channel: ""
  global.alertTools.credentials.victorOps.routingkey: ""
  global.alertTools.credentials.victorOps.apikey: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-overrides
  namespace: kyma-installer
  labels:
    installer: overrides
    component: istio
    kyma-project.io/installation: ""
data:
  gateways.istio-ingressgateway.loadBalancerIP: ""
  global.proxy.excludeIPRanges: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: knative-overrides
  namespace: kyma-installer
  labels:
    installer: overrides
    component: knative
    kyma-project.io/installation: ""
data:
  knative.domainName: "knative-upgrade2.kyma.online"

---
apiVersion: "installer.kyma-project.io/v1alpha1"
kind: Installation
metadata:
  name: kyma-installation
  labels:
    kyma-project.io/installation: ""
  finalizers:
    - finalizer.installer.kyma-project.io
spec:
  version: ""
  url: ""
  components:
    - name: "cluster-essentials"
      namespace: "kyma-system"
    - name: "istio"
      namespace: "istio-system"
    - name: "xip-patch"
      namespace: "kyma-installer"
    - name: "knative"
      namespace: "istio-system" # KNative comes with namespaces hardcoded so this one is only for installer
    - name: "istio-kyma-patch"
      namespace: "istio-system"
    - name: "prometheus-operator"
      namespace: "kyma-system"
    - name: "dex"
      namespace: "kyma-system"
    - name: "service-catalog"
      namespace: "kyma-system"
    - name: "service-catalog-addons"
      namespace: "kyma-system"
    - name: "helm-broker"
      namespace: "kyma-system"
    - name: "nats-streaming"
      namespace: "natss"
    - name: "assetstore"
      namespace: "kyma-system"
    - name: "cms"
      namespace: "kyma-system"
    - name: "core"
      namespace: "kyma-system"
    - name: "event-bus"
      namespace: "kyma-system"
    - name: "application-connector-ingress"
      namespace: "kyma-system"
    - name: "application-connector-helper"
      namespace: "kyma-integration"
    - name: "application-connector"
      namespace: "kyma-integration"
    - name: "ark"
      namespace: "heptio-ark"
    - name: "logging"
      namespace: "kyma-system"
    - name: "jaeger"
      namespace: "kyma-system"
    - name: "monitoring"
      namespace: "kyma-system"
